#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
syncfile.py ‚Äî ƒê·ªìng b·ªô 2 server theo c∆° ch·∫ø snapshot (hardlink) d√πng rsync + sharding

Ki·∫øn tr√∫c:
- K√©o d·ªØ li·ªáu t·ª´ SRC (qua SSH/rsync) v·ªÅ DEST.
- M·ªói l·∫ßn ch·∫°y t·∫°o 1 snapshot m·ªõi: DEST_BASE/snapshots/<YYYYmmdd_HHMMSS>.
- N·∫øu c√≥ snapshot tr∆∞·ªõc ƒë√≥, d√πng --link-dest ƒë·ªÉ hardlink file kh√¥ng ƒë·ªïi ‚Üí ti·∫øt ki·ªám dung l∆∞·ª£ng.
- Chia nh·ªè c√¢y th∆∞ m·ª•c th√†nh nhi·ªÅu "shard" ƒë·ªÉ rsync song song.
- D√πng staging (th∆∞ m·ª•c t·∫°m) ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn; ch·ªâ khi t·∫•t c·∫£ shard th√†nh c√¥ng m·ªõi rename th√†nh snapshot.
- C√≥ xoay v√≤ng s·ªë snapshot gi·ªØ l·∫°i (retention).

Ghi ch√∫ v·∫≠n h√†nh:
- DEST_BASE v√† snapshots ph·∫£i c√πng filesystem ƒë·ªÉ hardlink ho·∫°t ƒë·ªông.
- Lu√¥n exclude "/snapshots/" v√† "/latest" ·ªü ngu·ªìn ƒë·ªÉ tr√°nh v√≤ng l·∫∑p.
- Webserver tr·ªè v√†o DEST_BASE/latest (symlink t·ªõi snapshot m·ªõi nh·∫•t).
- C√≥ th·ªÉ ƒë·∫∑t snapshot read-only: `chmod -R a-w DEST_BASE/snapshots/*`.

C√°ch d√πng nhanh:
  python3 syncfile.py \
    --src user@host:/data/src \
    --dest-base /backup/datasetA \
    --identity ~/.ssh/id_ed25519 \
    --port 22 \
    --shards 8 \
    --keep-last 14 \
    --exclude-file /etc/rsync-snapshot.excludes

File /etc/rsync-snapshot.excludes n√™n c√≥:
  /snapshots/
  /latest

"""

import argparse
import concurrent.futures
import datetime as dt
import hashlib
import os
import shutil
import signal
import subprocess
import sys
import shlex
from pathlib import Path
from typing import List, Tuple

# -------------------------------
# Utils
# -------------------------------

def sh(cmd: List[str], check: bool = True, cwd: Path | None = None) -> subprocess.CompletedProcess:
    print("[CMD]", " ".join(cmd))
    return subprocess.run(cmd, check=check, cwd=str(cwd) if cwd else None)


def which(binary: str) -> str:
    p = shutil.which(binary)
    if not p:
        print(f"‚ùå Thi·∫øu binary: {binary}")
        sys.exit(2)
    return p


def now_ts() -> str:
    return dt.datetime.now().strftime("%Y%m%d_%H%M%S")


def shlex_quote(s: str) -> str:
    return shlex.quote(s)

# -------------------------------
# Sharding helpers
# -------------------------------

def list_top_entries_via_ssh(src_spec: str, identity: str | None, port: int | None, extra_ssh: List[str]) -> List[str]:
    """Li·ªát k√™ c√°c ph·∫ßn t·ª≠ level-1 (file/dir) b√™n SRC.
    Tr·∫£ v·ªÅ danh s√°ch relative names (kh√¥ng c√≥ slash ƒë·∫ßu).
    src_spec d·∫°ng: user@host:/path/to/root
    """
    if ":" not in src_spec:
        raise ValueError("--src ph·∫£i d·∫°ng user@host:/abs/path ho·∫∑c host:/abs/path")
    host, remote_path = src_spec.split(":", 1)

    # D√πng -print0 ƒë·ªÉ tr√°nh nh√∫ng NUL v√†o argv; strip './' ·ªü client
    remote_cmd = [
        "bash", "-lc",
        f"cd {shlex_quote(remote_path)} && find . -mindepth 1 -maxdepth 1 -print0",
    ]

    # ssh command
    ssh_cmd = ["ssh"]
    if identity:
        ssh_cmd += ["-i", identity]
    if port:
        ssh_cmd += ["-p", str(port)]
    # Reuse session ƒë·ªÉ nhanh h∆°n
    ssh_cmd += [
        "-o", "ServerAliveInterval=30",
        "-o", "ServerAliveCountMax=3",
        "-o", "ControlMaster=auto",
        "-o", f"ControlPath={str(Path.home())}/.ssh/cm-%r@%h:%p",
        "-o", "ControlPersist=60s",
    ]
    ssh_cmd += extra_ssh
    ssh_cmd += [host, "--"] + remote_cmd

    cp = subprocess.run(ssh_cmd, check=True, stdout=subprocess.PIPE)
    raw = cp.stdout.decode("utf-8", errors="ignore").split("\0")
    items: List[str] = []
    for s in raw:
        if not s:
            continue
        if s.startswith("./"):
            s = s[2:]
        s = s.strip("/")
        if s:
            items.append(s)
    items.sort()
    return items


def shard_by_chunk(items: List[str], shards: int) -> List[List[str]]:
    if shards <= 1:
        return [items]
    buckets: List[List[str]] = [[] for _ in range(shards)]
    for i, name in enumerate(items):
        buckets[i % shards].append(name)
    return buckets


def shard_by_hash(items: List[str], shards: int) -> List[List[str]]:
    if shards <= 1:
        return [items]
    buckets: List[List[str]] = [[] for _ in range(shards)]
    for name in items:
        h = int(hashlib.blake2b(name.encode("utf-8"), digest_size=4).hexdigest(), 16)
        buckets[h % shards].append(name)
    return buckets

# -------------------------------
# Rsync helpers
# -------------------------------

def build_rsync_base_cmd(identity: str | None, port: int | None, compress: bool, bwlimit: int | None, extra_ssh: List[str]) -> List[str]:
    ssh_parts = ["ssh"]
    if identity:
        ssh_parts += ["-i", identity]
    if port:
        ssh_parts += ["-p", str(port)]
    ssh_parts += [
        "-o", "ServerAliveInterval=30",
        "-o", "ServerAliveCountMax=3",
        "-o", "ControlMaster=auto",
        "-o", f"ControlPath={str(Path.home())}/.ssh/cm-%r@%h:%p",
        "-o", "ControlPersist=300s",
    ] + extra_ssh

    base = [
        which("rsync"),
        "-aHAX",            # archive + hardlinks + xattrs
        "--numeric-ids",
        "--partial",
        "--prune-empty-dirs",
        "--no-inc-recursive",  # ·ªïn ƒë·ªãnh RAM cho c√¢y l·ªõn
        "-e", " ".join(ssh_parts),
        "--info=stats2",
    ]
    if compress:
        base.append("-z")
    if bwlimit:
        base += ["--bwlimit", str(bwlimit)]
    return base


def write_include_file(target: Path, rels: List[str]) -> None:
    lines = []
    for r in rels:
        r = r.strip("/")
        if not r:
            continue
        lines.append(f"+ /{r}/***\n")
        lines.append(f"+ /{r}\n")
    lines.append("- /***\n")
    target.parent.mkdir(parents=True, exist_ok=True)
    target.write_text("".join(lines), encoding="utf-8")


def rsync_one_shard(src_spec: str, stage_dir: Path, link_dest: Path | None, include_file: Path,
                    base_cmd: List[str], extra_rsync_opts: List[str], dry_run: bool) -> None:
    dest = stage_dir
    cmd = list(base_cmd)
    if link_dest:
        cmd += ["--link-dest", str(link_dest.resolve())]
    cmd += [
        "--include-from", str(include_file),
        src_spec + "/",            # nh·ªõ d·∫•u '/'
        str(dest),
    ] + extra_rsync_opts
    if dry_run:
        cmd.append("-n")
    sh(cmd)

# -------------------------------
# Snapshot housekeeping
# -------------------------------

def latest_snapshot_path(base: Path) -> Path | None:
    snaps = sorted((base / "snapshots").glob("*"))
    return snaps[-1] if snaps else None


def atomic_rename(src: Path, dst: Path) -> None:
    src.replace(dst)  # atomic trong c√πng filesystem


def rotate_snapshots(base: Path, keep_last: int) -> None:
    snaps = sorted((base / "snapshots").glob("*"))
    if keep_last <= 0:
        return
    to_delete = snaps[:-keep_last]
    for p in to_delete:
        print(f"üßπ Xo√° snapshot c≈©: {p}")
        shutil.rmtree(p, ignore_errors=False)

# -------------------------------
# Main
# -------------------------------

def main():
    ap = argparse.ArgumentParser(description="Rsync snapshot + hardlink + sharding")
    ap.add_argument("--src", required=True, help="user@host:/abs/path ngu·ªìn")
    ap.add_argument("--dest-base", required=True, help="Th∆∞ m·ª•c g·ªëc ch·ª©a snapshots ·ªü m√°y ƒë√≠ch")
    ap.add_argument("--identity", default=None, help="SSH identity file (private key)")
    ap.add_argument("--port", type=int, default=None, help="SSH port")
    ap.add_argument("--extra-ssh", default="", help="Chu·ªói tu·ª≥ ch·ªçn SSH b·ªï sung, v√≠ d·ª•: -o StrictHostKeyChecking=no")
    ap.add_argument("--exclude-file", default=None, help="ƒê∆∞·ªùng d·∫´n file exclude patterns cho rsync (option --exclude-from)")
    ap.add_argument("--compress", action="store_true", help="B·∫≠t n√©n khi truy·ªÅn (-z)")
    ap.add_argument("--bwlimit", type=int, default=None, help="Gi·ªõi h·∫°n bƒÉng th√¥ng KB/s (rsync --bwlimit)")
    ap.add_argument("--shards", type=int, default=4, help="S·ªë shard ch·∫°y song song")
    ap.add_argument("--shard-mode", choices=["chunk", "hash"], default="chunk", help="C√°ch chia shard: chunk (round-robin) ho·∫∑c hash")
    ap.add_argument("--keep-last", type=int, default=14, help="Gi·ªØ l·∫°i bao nhi√™u snapshot g·∫ßn nh·∫•t")
    ap.add_argument("--dry-run", action="store_true", help="Ch·∫°y th·ª≠, kh√¥ng ghi d·ªØ li·ªáu")

    args = ap.parse_args()

    which("ssh"); which("rsync")

    extra_ssh = args.extra_ssh.split() if args.extra_ssh else []

    base = Path(args.dest_base).resolve()
    (base / "snapshots").mkdir(parents=True, exist_ok=True)
    (base / "logs").mkdir(parents=True, exist_ok=True)

    # Li·ªát k√™ entries level-1 ƒë·ªÉ chia shard
    print("üîé ƒêang l·∫•y danh s√°ch level-1 t·ª´ ngu·ªìn...")
    items = list_top_entries_via_ssh(args.src, args.identity, args.port, extra_ssh)
    if not items:
        print("‚ö†Ô∏è Kh√¥ng c√≥ m·ª•c n√†o d∆∞·ªõi ngu·ªìn, d·ª´ng.")
        return

    if args.shards > len(items):
        args.shards = max(1, len(items))

    buckets = shard_by_chunk(items, args.shards) if args.shard_mode == "chunk" else shard_by_hash(items, args.shards)

    ts = now_ts()
    stage = base / f".stage-{ts}"
    stage.mkdir(parents=True, exist_ok=True)

    latest = latest_snapshot_path(base)
    link_dest = latest if latest else None

    # include files theo shard
    include_dir = stage / ".include"
    include_dir.mkdir(exist_ok=True)
    include_files: List[Tuple[int, Path]] = []
    for i, rels in enumerate(buckets):
        inc = include_dir / f"shard{i:02d}.inc"
        write_include_file(inc, rels)
        include_files.append((i, inc))

    # rsync base cmd cho c√°c shard
    base_cmd = build_rsync_base_cmd(args.identity, args.port, args.compress, args.bwlimit, extra_ssh)

    # ‚¨áÔ∏è T·∫°o danh s√°ch opts cho c√°c shard
    extra_rsync_opts: List[str] = []
    # Lu√¥n exclude v√≤ng l·∫∑p
    extra_rsync_opts += ["--exclude", "/snapshots/", "--exclude", "/latest"]
    # Th√™m exclude-file c·ªßa b·∫°n (n·∫øu c√≥)
    if args.exclude_file:
        extra_rsync_opts += ["--exclude-from", args.exclude_file]

    # B·∫Øt t√≠n hi·ªáu ƒë·ªÉ d·ªçn staging n·∫øu b·ªã kill
    def cleanup_and_exit(signum, frame):
        print(f"\nüõë Nh·∫≠n t√≠n hi·ªáu {signum}, d·ªçn staging {stage} ...")
        try:
            shutil.rmtree(stage)
        except Exception as e:
            print("Cleanup l·ªói:", e)
        sys.exit(1)
    for s in (signal.SIGINT, signal.SIGTERM):
        signal.signal(s, cleanup_and_exit)

    # Ch·∫°y song song c√°c shard (KH√îNG delete trong pass shard)
    print(f"üöö B·∫Øt ƒë·∫ßu rsync {len(include_files)} shard ‚Üí {stage} (link-dest={link_dest if link_dest else 'None'})")
    errors: List[Tuple[int, Exception]] = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=len(include_files)) as ex:
        futs = []
        for i, inc in include_files:
            futs.append(ex.submit(
                rsync_one_shard,
                args.src,
                stage,
                link_dest,
                inc,
                base_cmd,
                extra_rsync_opts,
                args.dry_run,
            ))
        for i, fut in enumerate(concurrent.futures.as_completed(futs)):
            try:
                fut.result()
                print(f"‚úÖ Shard {i+1}/{len(futs)} xong")
            except Exception as e:
                errors.append((i, e))

    if errors:
        print("‚ùå M·ªôt s·ªë shard th·∫•t b·∫°i:")
        for i, e in errors:
            print(f"  - shard#{i}: {e}")
        print("‚Üí Hu·ª∑ snapshot, d·ªçn staging.")
        shutil.rmtree(stage, ignore_errors=True)
        sys.exit(1)

    # Pass cu·ªëi: reconcile delete to√†n c√¢y (an to√†n v√¨ ƒë√£ c√≥ d·ªØ li·ªáu stage)
    if not args.dry_run:
        print("üßÆ Reconcile delete to√†n c√¢y...")
        final_cmd = build_rsync_base_cmd(args.identity, args.port, args.compress, args.bwlimit, extra_ssh)
        final_cmd += ["--delete", "--delete-excluded"]
        if link_dest:
            final_cmd += ["--link-dest", str(link_dest.resolve())]
        # Excludes gi·ªëng nh∆∞ ·ªü shard-pass
        final_cmd += ["--exclude", "/snapshots/", "--exclude", "/latest"]
        if args.exclude_file:
            final_cmd += ["--exclude-from", args.exclude_file]
        sh(final_cmd + [args.src + "/", str(stage)])

    # T·∫°o snapshot m·ªõi
    snap_dir = base / "snapshots" / ts
    if not args.dry_run:
        print(f"üß© ƒê√≥ng g√≥i snapshot: {snap_dir}")
        atomic_rename(stage, snap_dir)
        # c·∫≠p nh·∫≠t symlink latest
        latest_link = base / "latest"
        tmp_link = base / f".latest-{ts}"
        try:
            if tmp_link.exists() or tmp_link.is_symlink():
                tmp_link.unlink()
            tmp_link.symlink_to(Path("snapshots") / ts)
            tmp_link.replace(latest_link)
        except Exception as e:
            print("C·∫≠p nh·∫≠t symlink 'latest' l·ªói:", e)

        # Xoay v√≤ng
        rotate_snapshots(base, args.keep_last)
    else:
        print("[DRY-RUN] B·ªè qua reconcile/delete, rename v√† rotate")
        shutil.rmtree(stage, ignore_errors=True)

    print("üéâ Ho√†n t·∫•t.")

if __name__ == "__main__":
    main()